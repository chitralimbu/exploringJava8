FixedThreadPool - CompletableFuture - Stream; 

ExecutorService executor = Executors.newFixedThreadPool(4);

List<String> topSites = Arrays.asList(
        "www.google.com", "www.youtube.com", "www.yahoo.com", "www.msn.com"
);

List<CompletableFuture<Double>> relevanceFutures = topSites.stream().
        map(site -> CompletableFuture.supplyAsync(() -> downloadSite(site), executor)).
        map(contentFuture -> contentFuture.thenApply(this::parse)).
        map(docFuture -> docFuture.thenCompose(this::calculateRelevance)).
        collect(Collectors.<CompletableFuture<Double>>toList());
        
https://dzone.com/articles/java-8-completablefuture

Similarly:

List<Double> relevanceFeature = topSites.parallelStream()
        .map(site -> download(site), *executor*) <- Don't have to add executor, parallel stream will auto optamise the threadpool. 
        .map(this::parse)
        .map(this::calculateRelevance)
        .collect(Collectors.toList());
