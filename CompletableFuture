FixedThreadPool - CompletableFuture - Stream; 

ExecutorService executor = Executors.newFixedThreadPool(4);

List<String> topSites = Arrays.asList(
        "www.google.com", "www.youtube.com", "www.yahoo.com", "www.msn.com"
);

List<CompletableFuture<Double>> relevanceFutures = topSites.stream().
        map(site -> CompletableFuture.supplyAsync(() -> downloadSite(site), executor)).
        map(contentFuture -> contentFuture.thenApply(this::parse)).
        map(docFuture -> docFuture.thenCompose(this::calculateRelevance)).
        collect(Collectors.<CompletableFuture<Double>>toList());
        
https://dzone.com/articles/java-8-completablefuture

Similarly:

List<Double> relevanceFeature = topSites.parallelStream()
        .map(site -> download(site))
        .map(this::parse)
        .map(this::calculateRelevance)
        .collect(Collectors.toList());

ForkJoinPool customThreadPool = new ForkJoinPool(4);
long actualTotal = customThreadPool.submit(
        () -> aList.parallelStream().reduce(0L, Long::sum)).get();

**************************************************

ExecutorService executor = new Executors.newFixedThreadPool(10)

List<String> completedFuture = topSites.stream()
        .map(t -> CompletableFUture.supplyAsync(() -> t.calculate(), executor) <- again executor is optional
        .map(CompletableFuture::join)
        .collect(Collectors.toList());
        
If no ExecutorService is defined then parallelStream and CompletableFuture will both attempt to optimise the thread pool to a maximum
of number of cores - 1 pools. 

To get Number of cores: 
int processors = Runtime.getRuntime().availableProcessors();


