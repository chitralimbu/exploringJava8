Running one microservice instance per bare metal is not cost effective. 

In most cases, enterprises deploy multiple microservices on a single bare metal server. 
This could however lead to a "noisy neighbour" problem. 
There is no isolation between the microservice instances running on the same machine. 
Resulting in services eating up each other's space, impacting performance. 

Alternate approach is running microservices on VMs. 
VMs are heavyweight, therefore running VMs on a physical machine is not resource efficient. 
This generally results in resource wastage. 
In the case of sharing VM to deploy multiple services, we would end up facing the same issues
of sharing the bare metal. 

Java based microservices, sharing a VM or or bare metal to deploy multiple microservices also result in 
sharing JRE amond MS. 
Any update on JRE installed on the machine will have an impact on all the microservices deployed in the machine. 
Similarly, if ther eare OS-level parameters, libraries, or tunings that are required for
specific microservices, then it will be hard to manage them on a shared environment. 

The microservice principle insists that it should be "self contained" and "autonomous" by fully 
encapsulating its end-to-end runtime environment.
Therefore all components, such as OS, JRE and microservice binaries have to be self contained and isolated. 

CONTAINERS: 
Provide private spaces on top of the OS. Operating system virtualization. 
Kernal of the OS provides isolated virtual spaces. Each of these virtual spaces is called a container (Virtual Engines "VE").
Allow processes to run on an isolated environment on top of host OS. 

--------|---------|----------
  c     |   c     |   c
  o     |   o     |   o
  n     |   n     |   n
  t     |   t     |   t
  a     |   a     |   a
  i     |   i     |   i
  n     |   n     |   n
  e     |   e     |   e
  r     |   r     |   r
------------------------------
|           OS              |
------------------------------
|       Server H/W          |
------------------------------

Containers are easy to build, ship and cun compartmentalized software components. 
Containers pacakge all binaries and libs that are essential for running an application. 
They reserve their own filesystem, IP, network interfaces, internal processes, namespaces
OS libraries, application binaries, dependencies and other app configs. 

============================================================================

Difference between VMs and containers. 

On the face of it virtualization and containerization exibit exactly the same characteristics. 

VM's provide hardware virtualization.
  -CPUs,
  -Motherboards
  -Memory etc
VM : 
  -Isolated unit with an embedded OS (Generally Guest OS). 
  -VM's replicate the whole OS and run it within the VM with no dependency on the host OS
  -As VM's imbed the full OS they are heavyweight in nature. 
Advantage:
  -Provide complete isolation to the processes running on VMs. 
  -More friendly with infrastructure teams as it requires low level of infra competency to manage VMs. 
Disadvantage:
  -Limits the number of VMs one can spin up in a bare metal due to resource requirements. 
  -Large size means starting and stopping takes time. 

Containers: 
Do not emulate the entire hardware or OS.
Containers share certain parts of the host kernel and OS. 

Containers provide an isolated "EXECUTION ENVIRONMENT" directly on top of the host OS.
Advantage:
  -Lighter and faster: Containers share the host OS. 
  -Overall resource utilization of containers is fairly small. 
  -Many smaller containers can be run on the same machine. 
  -Container images are publically available in community portals, take base image from certified
  sourse and add additional layers of software components on top of the downloaded base image. 

Lightweight nature means it opens up opportunities: 
Automation:
  -Build
  -Publishing
  -Downloading
  -Copying etc. 

Ease of downloading and running means Developing REST API's more developer friendly. 
Containers are part of CD pipelies as well. 

Disadvantages:
  -Security: Unable to put firewall rules inside a container.
  -Processes inside the containers are entirely independent. 

===============================================================================

General advantages of containers. 

Self contained:
  -Package the essential application binaries and their dependencies together to make sure that there is 
  no disparity between different environments. 
  -Prompts 12-factor apps and immutable containers. 

Lightweight:
  -Small size, large footprint.
  -Compared to VMs which take GBs images for containers are very small in size.
  -The smaller footprint of containers speeds up:
    -Running new containers
    -Building
    -Shipping
    -Storing
 
 Scalable:
  -As they are very lightweitht and quick to startup, its a popular choice for cloud-friendly elastic applications. 
 
 Portable:
  -Containers provide portability across machines and cloud providers. 
  -Once built they can be ported across multiple cloud providers, without relying on underlying machines. 
 
DevOps:
  -Lightweight footprint of containers means its easy to automate build and publish and download containers
  from remote repositories. 
  -Easy to use in agile and DevOps env and intigrate with automated delivery pipelines.
  -Immutable containers means that it supports a build once policy, therefore is easy to move across multiple
  environments. 
  -Easy to manage as part of their day to day life. 
  
Version controlled:

Reusable: 
  -Container images are reusable artifacts. 
  
Immutable containers:
  -Containers are created and disposed after usage. 
  -Never updated or patched. 
  -Patching results in lack of traceability and an inability to recreate env consistantly. 
  
  
  
 ===========================

 Modify docker = Docker modified - pull request
  
  





