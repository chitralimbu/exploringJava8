HTTP caching. 

HTTP caching occurs when the browser stores local copies of web resources for faster
retrieval the next time the resource is required. 
As you aplication serves resources it can attach cache headers to the response specifying the
desired cache behaviour. 
              |               Request                              |
Client Browser| -------------------------------------------------> |web server
      |       | <------------------------------------------------- |
      |                 Response(Headers dictate cache policy)
      |(Store for later use)
      |
     \|/
 Local browser 
    cache
    
When an item is fully cached, the browser may choose to not contact the server at all and
simply use its own caced copy: 

Is the resource cached
  and not stale ?
              |               Request                              |
Client Browser| -------------------------------------------------> |web server
      |  /|\  | <------------------------------------------------- |
      |   |              No: Request from server
      |   | (Yes: Bypass server fetch from browser cache)
      |   |
     \|/  |
 Local browser 
    cache

For instance, Static resources such as CSS stylesheets, images, JS files and infrequently changing dynamic content
have no need to be downloaded again during the user's session. In these instances it is benifitial for the users
browser to cache these files locally, and use that copy whenever the resource is requested again. 
An application using HTTP cache headers is able to control this caching behaviour and alleviate server-side load. 

There are 2 primary cache headers, Cache-Control and Expires. 

Cache-Control
This effectively switches on caching in the browser. With this enabled browser cache for as long as specified.
Without it browser will re-request the file on each subsequent request. 

public: resources can be cached by both end-user's browser but also intermediate proxies 





    

