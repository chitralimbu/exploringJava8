HTTP caching. 

HTTP caching occurs when the browser stores local copies of web resources for faster
retrieval the next time the resource is required. 
As you aplication serves resources it can attach cache headers to the response specifying the
desired cache behaviour. 
              |               Request                              |
Client Browser| -------------------------------------------------> |web server
      |       | <------------------------------------------------- |
      |                 Response(Headers dictate cache policy)
      |(Store for later use)
      |
     \|/
 Local browser 
    cache
    
When an item is fully cached, the browser may choose to not contact the server at all and
simply use its own caced copy: 

Is the resource cached
  and not stale ?
              |               Request                              |
Client Browser| -------------------------------------------------> |web server
      |  /|\  | <------------------------------------------------- |
      |   |              No: Request from server
      |   | (Yes: Bypass server fetch from browser cache)
      |   |
     \|/  |
 Local browser 
    cache

For instance, Static resources such as CSS stylesheets, images, JS files and infrequently changing dynamic content
have no need to be downloaded again during the user's session. In these instances it is benifitial for the users
browser to cache these files locally, and use that copy whenever the resource is requested again. 
An application using HTTP cache headers is able to control this caching behaviour and alleviate server-side load. 

There are 2 primary cache headers, Cache-Control and Expires. 

Cache-Control
This effectively switches on caching in the browser. With this enabled browser cache for as long as specified.
Without it browser will re-request the file on each subsequent request. 

public: resources can be cached by both end-user's browser but also intermediate proxies that may be serving
many other users as well. 
Cache-Control:public

private: resources bypassed by intermediate proxies - can only be cached by the end - client. 
Cache-control:private

max-age: indicates max amount of time it can be cached before it is considered stale. 

Cache-Control:public, max-age=31536000

Expires: specifies header used to specify a specific point in time the resource is no lover valid. 
Sets a date from which the cache resource is no longer considered valid. From this date forward the browser
will request a fresh copy of the resource. 

(If both "Expires" and "max-age" are set "max-age" will take precedence. 

Cache-Control:public
Expires: Mon, 25 Jun 2012 21:31:23 GMT

====================

Conditional requests. 

Browser asks server if it has an updated copy of the resource. The browser sends some info about the cached
resource it holds, the server will then determine whether updated content should be returned or 
the browsers copy is the most recent in case if is not (not modified) is returned. 

              |      Is my copy the most recent?                   |
Client Browser| -------------------------------------------------> |web server
      |       | <------------------------------------------------- |
      |                 Yes:HTTP 304 (not modified)
      |Then continue using the 
      |same cached copy.
     \|/
 Local browser 
    cache

Although a call to the server is invoked, 304 returns an empty response body, saving the cost of transferring
the resource to the client. 
Backend service is also often able to very quickly determine a resource's last modified date without
accessing the resource which itself saves non-trivial processing time. 

Time-based

Ensures that only if the requested resource has changed since the browser's copy was chached, will the
contents be transferred. 
A 304 response is returned if the cached copy is the most up to date one. 

Last-Modified:
Cache-Control:public, max-age:31536000
Last-Modified: Mon, 03 Jan 2011 17:45:57 GMT

The next time the browser requests this resource it will only ask for the contents of the resource if
they're unchanged since this date using If-Modified-Since request header: 

If-Modified-Since: Mon, 03 Jan 2011 17:45:57 GMT.

The server will return 304 if the resource hasn't been modified since. 

Content-Based. 

ETag - is similar to Last-Modified header - except the value is a digest (e.g. MD5), allowing server to 
identify if the cached contents of the resouce are differenct to the most recent version. 















    

